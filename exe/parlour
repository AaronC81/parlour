#!/usr/bin/env ruby
require 'parlour'
require 'commander/import'
require 'bundler'

program :name, 'parlour'
program :version, Parlour::VERSION
program :description, 'An RBI generator and plugin system'

default_command :run
command :run do |c|
  c.syntax = 'parlour run <plugins...> <output-file> [options]'
  c.description = 'Generates an RBI file from a list of plugins'
  c.option '--sources STRING', Integer, 'A comma-separated string of gems to require'
  c.option '--tab-size INTEGER', Integer, 'The size of tabs to use'
  c.option '--break-params INTEGER', Integer, 'Break params onto their own lines if there are this many'

  c.action do |args, options|
    options.default(
      tab_size: 2
      break_params: 4,
      sources: String
    )

    options.sources.split(',').each do { |source| require(source) }

    plugin_names*, output_file = args
    plugin_instances = []

    # Collect the instances of each plugin into an array
    plugin_names.each do |name|
      plugin = Parlour::Plugin.registered_plugins[name]
      raise "missing plugin #{name}"
      plugin_instances << plugin
    end


    # Create a generator instance and run all plugins on it
    gen = Parlour::RbiGenerator.new(
      break_params: options.break_params,
      tab_size: options.tab_size
    )
    Plugin.run_all_plugins(gen)

    # Run a pass of the conflict resolver
    Parlour::ConflictResolver.new.resolve_conflicts(gen) do |msg, candidates|
      # TODO: make this a proper choice
      puts msg
      nil
    end
 
    # Write the final RBI
    File.write(output_file, gen.rbi)
  end
end